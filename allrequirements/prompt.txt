# Number Quest - Development Guide & Prompts

## Project Overview
Create a Flutter puzzle game app named "Number Quest" that challenges players to arrange numbered tiles in the correct order using a unique dual empty space mechanic. The app fetches 525 puzzles from Firebase Realtime Database with grid sizes ranging from 2×2 to 7×7. Features include timer tracking, best time records, hints, difficulty levels, and responsive design.

## Development Prompts

### Initial Setup Prompt
```
Create a new Flutter project named 'number_quest' with the following dependencies in pubspec.yaml:
- firebase_core: ^2.15.0
- firebase_database: ^10.2.4
- provider: ^6.0.5 (for state management)
- shared_preferences: ^2.2.0 (for local storage)
- flutter_animator: ^3.2.2 (for animations)
Add Android and iOS platform configurations for Firebase integration.
```

### Firebase Structure Prompt
```
Set up a Firebase Realtime Database with the following structure:
{
  "numberquests": {
    "puzzles": {
      "puzzle1": {
        "id": "puzzle1",
        "title": "Level 1 - Easy",
        "description": "Arrange numbers in a 3x3 grid.",
        "grid": [[1, 2, 3], [4, 5, 6], [7, 0, 0]],
        "solution": [[1, 2, 3], [4, 5, 6], [7, 0, 0]],
        "best_time": 120,
        "best_player_name": "",
        "hints": ["Start from the top left corner."],
        "difficulty": "easy"
      },
      // Add more puzzles with varying grid sizes and difficulties
    }
  }
}
Configure Firebase rules to allow read/write access.
```

### File Structure Implementation Prompt
```
Create the following directory structure for the Number Quest app:
/lib
  ├── main.dart                    // App entry point and Firebase initialization
  ├── screens/
  │     ├── splash_screen.dart     // Initial loading screen with app logo
  │     ├── home_screen.dart       // Main menu with puzzle selection by difficulty
  │     ├── puzzle_screen.dart     // Interactive puzzle gameplay screen
  │     ├── settings_screen.dart   // App settings and preferences
  │     └── stats_screen.dart      // Player statistics and achievements
  ├── widgets/
  │     ├── puzzle_grid.dart       // Dynamic grid generation for different sizes
  │     ├── tile_widget.dart       // Individual puzzle tiles with move animation
  │     ├── timer_widget.dart      // Game timer with formatting
  │     ├── hint_widget.dart       // Expandable hint display
  │     └── difficulty_filter.dart // Filter puzzles by difficulty level
  ├── models/
  │     ├── puzzle.dart            // Puzzle data model
  │     ├── game_state.dart        // Current game state management
  │     └── user_stats.dart        // Player statistics tracking
  ├── services/
  │     ├── firebase_service.dart  // Firebase data operations
  │     ├── puzzle_solver.dart     // Solution verification algorithm
  │     └── storage_service.dart   // Local storage operations
  └── utils/
        ├── constants.dart         // App-wide constants and theme data
        ├── animations.dart        // Custom animation definitions
        └── helpers.dart           // Helper functions and utilities
```

### Models Implementation Prompt
```
Create the Puzzle model class with:
- Properties for id, title, description, grid (2D array), solution, best_time, best_player_name, hints, and difficulty
- Methods for checking if a move is valid given two empty spaces
- Methods to verify if the current grid matches the solution
- Factory constructor to parse from Firebase JSON data

Create the GameState model using Provider pattern to track:
- Current puzzle state (2D array)
- Timer value
- Move count
- Game completion status
```

### Firebase Service Implementation Prompt
```
Implement a FirebaseService class with:
- Method to fetch all puzzle data with optional filtering by difficulty
- Method to fetch a single puzzle by id
- Method to update the best time when a player beats the record
- Error handling for network issues
- Caching mechanism for offline play
```

### UI Screens Implementation Prompts

#### Home Screen Prompt
```
Create a home screen with:
- App title and logo at the top
- Difficulty selection tabs (Easy, Medium, Hard, Expert)
- Grid view of puzzle cards displaying:
  - Puzzle title
  - Grid size
  - Best time (if any)
  - Visual indicator of completion status
- Navigation to settings and stats screens
- Loading indicator while fetching puzzles
- Pull-to-refresh functionality
Use a staggered animation for the puzzle cards appearance
```

#### Puzzle Screen Prompt
```
Implement a puzzle screen with:
- Header showing puzzle title and difficulty
- Timer that starts automatically when the screen loads
- Move counter
- Dynamically sized grid based on puzzle dimensions
- Tiles that can be moved only if adjacent to one of the two empty spaces
- Hint button that expands to show available hints
- "Reset" button to restart the current puzzle
- Best time display
- Game completion detection that:
  - Stops the timer
  - Shows a celebration animation
  - Updates the best time if applicable
  - Offers options to return to menu or try next puzzle
```

#### Puzzle Grid and Tile Implementation Prompt
```
Create a dynamic PuzzleGrid widget that:
- Calculates appropriate tile sizes based on screen dimensions and grid size
- Arranges tiles in a grid pattern matching the puzzle dimensions
- Handles the rendering of the two empty spaces

Implement a TileWidget that:
- Displays a number or image
- Supports tap gestures for movement
- Animates smoothly when moving to a new position
- Has a distinctive visual style based on its position (correct/incorrect)
- Implements haptic feedback when moved
```

### Game Logic Implementation Prompt
```
Implement the core game logic that:
- Tracks the positions of the two empty spaces
- Determines which tiles are movable (adjacent to either empty space)
- Validates moves before executing them
- Updates the game state after each move
- Checks for puzzle completion after each move by comparing with the solution
- Calculates player performance metrics (time, moves)
```

### Animation and Styling Prompt
```
Implement animations and styling:
- Smooth sliding animations for tile movement using AnimatedPositioned
- Celebration animation on puzzle completion
- Subtle background patterns that vary by difficulty level
- Color themes (light/dark) with user preference toggle
- Responsive layout that adapts to different screen sizes and orientations
- Accessibility considerations for color contrast and text size
```

### Testing Implementation Prompt
```
Create comprehensive tests:
- Unit tests for the puzzle model and game logic
- Widget tests for the UI components
- Integration tests for Firebase connectivity
- Performance tests for larger grid sizes
```

## Complete Implementation Workflow

1. **Setup Firebase Project**:
   - Create a new project in Firebase Console
   - Set up Realtime Database
   - Import sample puzzle data
   - Configure security rules
   - Add Android and iOS apps
   - Download and place configuration files

2. **Initialize Flutter Project**:
   - Create new project with Flutter CLI
   - Add dependencies to pubspec.yaml
   - Configure platform-specific files

3. **Implement Core Models**:
   - Create data models for puzzles and game state
   - Implement game logic algorithms

4. **Implement Firebase Services**:
   - Create service for data fetching and updating
   - Implement caching for offline functionality

5. **Build UI Components**:
   - Create responsive layouts for all screens
   - Implement dynamic grid rendering
   - Create animated tile components
   - Design and implement game controls

6. **Add Game Mechanics**:
   - Implement dual empty space movement logic
   - Create timer and move counter
   - Add solution verification
   - Implement best time tracking

7. **Polish and Refine**:
   - Add animations and transitions
   - Implement themes and styling
   - Add sound effects and haptic feedback
   - Optimize performance

8. **Test and Debug**:
   - Run comprehensive tests
   - Fix any identified issues
   - Test on multiple device sizes

9. **Deploy**:
   - Generate release builds
   - Configure app signing
   - Prepare for app store submission

## Key Technical Challenges and Solutions

### Dual Empty Space Movement
The unique challenge is implementing the two-empty-space system. Unlike traditional sliding puzzles, tiles can move to either of two empty spaces, creating more strategic options.

**Implementation approach**:
```dart
bool isMovable(int row, int col) {
  // A tile is movable if it's adjacent to either empty space
  for (var emptySpace in emptySpaces) {
    if ((row == emptySpace.row && (col == emptySpace.col - 1 || col == emptySpace.col + 1)) ||
        (col == emptySpace.col && (row == emptySpace.row - 1 || row == emptySpace.row + 1))) {
      return true;
    }
  }
  return false;
}
```

### Dynamic Grid Sizing
Supporting multiple grid sizes (2×2 to 7×7) requires flexible layout calculation.

**Implementation approach**:
```dart
Widget buildGrid(BuildContext context, List<List<int>> grid) {
  int rows = grid.length;
  int cols = grid[0].length;
  
  // Calculate tile size based on available space
  double availableWidth = MediaQuery.of(context).size.width - 40; // padding
  double tileSize = availableWidth / cols;
  
  return Container(
    width: tileSize * cols,
    height: tileSize * rows,
    child: Stack(
      children: [
        for (int r = 0; r < rows; r++)
          for (int c = 0; c < cols; c++)
            if (grid[r][c] != 0) // Skip empty spaces (0)
              TileWidget(
                value: grid[r][c],
                size: tileSize,
                row: r,
                col: c,
                isMovable: isMovable(r, c),
                onTap: () => moveTile(r, c),
              ),
      ],
    ),
  );
}
```

This comprehensive guide provides all necessary prompts and implementation details to recreate the Number Quest app with its unique dual empty space puzzle mechanics.
